
exercise3.elf:     file format elf32-littlenios2
exercise3.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00004140

Program Header:
    LOAD off    0x00001000 vaddr 0x00004000 paddr 0x00004000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00004020 paddr 0x00004020 align 2**12
         filesz 0x000010b4 memsz 0x000010b4 flags r-x
    LOAD off    0x000020d4 vaddr 0x000050d4 paddr 0x00005178 align 2**12
         filesz 0x000000a4 memsz 0x000000a4 flags rw-
    LOAD off    0x0000221c vaddr 0x0000521c paddr 0x0000521c align 2**12
         filesz 0x00000000 memsz 0x00000114 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00004000  00004000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000120  00004020  00004020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00000f58  00004140  00004140  00001140  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       0000003c  00005098  00005098  00002098  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       000000a4  000050d4  00005178  000020d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000114  0000521c  0000521c  0000221c  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000023  00000000  00000000  00002178  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00000338  00000000  00000000  000021a0  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 0000061d  00000000  00000000  000024d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   000029e2  00000000  00000000  00002af5  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00001128  00000000  00000000  000054d7  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00003acb  00000000  00000000  000065ff  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  000004b4  00000000  00000000  0000a0cc  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00000d8e  00000000  00000000  0000a580  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00000aaa  00000000  00000000  0000b30e  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000040  00000000  00000000  0000bdb8  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000000c0  00000000  00000000  0000bdf8  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0000d3bd  2**0
                  CONTENTS, READONLY
 18 .cpu          00000005  00000000  00000000  0000d3c0  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0000d3c5  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0000d3c6  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   0000000b  00000000  00000000  0000d3c7  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    0000000b  00000000  00000000  0000d3d2  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   0000000b  00000000  00000000  0000d3dd  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 00000009  00000000  00000000  0000d3e8  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 00000023  00000000  00000000  0000d3f1  2**0
                  CONTENTS, READONLY
 26 .sopcinfo     0004913d  00000000  00000000  0000d414  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00004000 l    d  .entry	00000000 .entry
00004020 l    d  .exceptions	00000000 .exceptions
00004140 l    d  .text	00000000 .text
00005098 l    d  .rodata	00000000 .rodata
000050d4 l    d  .rwdata	00000000 .rwdata
0000521c l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00004178 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 exercise3.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
000048c4 l     F .text	0000007c udivmodsi4
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_load.c
00004ab0 l     F .text	00000020 alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_putstr.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
000050d4 l     O .rwdata	0000002c character_lcd_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_up_avalon_character_lcd.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
00004f10 l     F .text	00000008 alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00004b3c g     F .text	0000002c alt_main
00005230 g     O .bss	00000100 alt_irq
00005178 g       *ABS*	00000000 __flash_rwdata_start
00004cb8 g     F .text	00000010 alt_up_character_lcd_send_cmd
00004b68 g     F .text	00000038 alt_putstr
00000000  w      *UND*	00000000 __errno
00004c30 g     F .text	00000018 get_DDRAM_addr
00004000 g     F .entry	0000000c __reset
00004020 g       *ABS*	00000000 __flash_exceptions_start
0000522c g     O .bss	00000004 errno
000045f4 g     F .text	000002d0 SW_GRPB_interrupt
00005224 g     O .bss	00000004 alt_argv
0000d158 g       *ABS*	00000000 _gp
00004ba0 g     F .text	00000004 usleep
00005128 g     O .rwdata	00000030 alt_fd_list
00004f88 g     F .text	00000070 alt_find_dev
00004c88 g     F .text	00000020 alt_up_character_lcd_write_fd
00004000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
00004a00 g     F .text	00000008 __udivsi3
00005170 g     O .rwdata	00000004 alt_max_fd
00004a10 g     F .text	000000a0 alt_irq_register
00005330 g       *ABS*	00000000 __bss_end
0000521c g     O .bss	00000004 alt_irq_active
000040ec g     F .exceptions	00000054 alt_irq_handler
00005100 g     O .rwdata	00000028 alt_dev_null
00004cc8 g     F .text	00000008 alt_up_character_lcd_cursor_blink_on
00004f0c g     F .text	00000004 alt_dcache_flush_all
00005178 g       *ABS*	00000000 __ram_rwdata_end
00005168 g     O .rwdata	00000008 alt_dev_list
000050d4 g       *ABS*	00000000 __ram_rodata_end
0000515c g     O .rwdata	00000004 jtag_uart_0
00004a08 g     F .text	00000008 __umodsi3
00005330 g       *ABS*	00000000 end
00008000 g       *ABS*	00000000 __alt_stack_pointer
00004bfc g     F .text	00000034 altera_avalon_jtag_uart_write
00004c64 g     F .text	00000024 alt_up_character_lcd_write
00004140 g     F .text	0000003c _start
00004ba4 g     F .text	00000038 alt_sys_init
00004d3c g     F .text	00000070 alt_up_character_lcd_shift_display
00004cd8 g     F .text	00000064 alt_up_character_lcd_erase_pos
00005060 g     F .text	00000038 __mulsi3
000050d4 g       *ABS*	00000000 __ram_rwdata_start
00005098 g       *ABS*	00000000 __ram_rodata_start
0000417c g     F .text	000000f0 disp_seven_seg
00004e80 g     F .text	0000008c alt_busy_sleep
00005004 g     F .text	0000003c memcmp
00005330 g       *ABS*	00000000 __alt_stack_base
00004f18 g     F .text	00000070 alt_dev_llist_insert
0000521c g       *ABS*	00000000 __bss_start
0000456c g     F .text	00000088 main
00005228 g     O .bss	00000004 alt_envp
00004dac g     F .text	00000070 alt_up_character_lcd_shift_cursor
00005174 g     O .rwdata	00000004 alt_errno
00004940 g     F .text	00000060 __divsi3
00004e74 g     F .text	0000000c alt_up_character_lcd_open_dev
00004ca8 g     F .text	00000010 alt_up_character_lcd_init
00005098 g       *ABS*	00000000 __flash_rodata_start
00004bdc g     F .text	00000020 alt_irq_init
00004cd0 g     F .text	00000008 alt_up_character_lcd_cursor_off
00005220 g     O .bss	00000004 alt_argc
00004020 g       .exceptions	00000000 alt_irq_entry
00005160 g     O .rwdata	00000008 alt_fs_list
00004020 g       *ABS*	00000000 __ram_exceptions_start
00005178 g       *ABS*	00000000 _edata
00005330 g       *ABS*	00000000 _end
0000426c g     F .text	00000070 SW_GRPA_interrupt
00004140 g       *ABS*	00000000 __ram_exceptions_end
00004ffc g     F .text	00000008 altera_nios2_qsys_irq_init
0000400c g       .entry	00000000 exit
000049a0 g     F .text	00000060 __modsi3
00008000 g       *ABS*	00000000 __alt_data_end
00004020 g     F .exceptions	00000000 alt_exception
00004c48 g     F .text	0000001c alt_up_character_lcd_string
000042dc g     F .text	00000290 purchase
0000400c g       .entry	00000000 _exit
00005040 g     F .text	00000020 strlen
00004ff8 g     F .text	00000004 alt_icache_flush_all
00004e1c g     F .text	00000058 alt_up_character_lcd_set_cursor_pos
00005158 g     O .rwdata	00000004 alt_priority_mask
00004ad0 g     F .text	0000006c alt_load



Disassembly of section .entry:

00004000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
    4000:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
    4004:	08505014 	ori	at,at,16704
    jmp r1
    4008:	0800683a 	jmp	at

0000400c <_exit>:
	...

Disassembly of section .exceptions:

00004020 <alt_exception>:
         * Process an exception.  For all exceptions we must preserve all
         * caller saved registers on the stack (See the Nios2 ABI
         * documentation for details).
         */

        addi  sp, sp, -76
    4020:	deffed04 	addi	sp,sp,-76

#endif

#endif

        stw   ra,  0(sp)
    4024:	dfc00015 	stw	ra,0(sp)
        /*
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */

        stw   r1,   8(sp)
    4028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
    402c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
    4030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
    4034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
    4038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
    403c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
    4040:	d9c00815 	stw	r7,32(sp)

        rdctl r5, estatus
    4044:	000b307a 	rdctl	r5,estatus

        stw   r8,  36(sp)
    4048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
    404c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
    4050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
    4054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
    4058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
    405c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
    4060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
    4064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
    4068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
    406c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
    4070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
    4074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
    4078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
    407c:	10000326 	beq	r2,zero,408c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
    4080:	20000226 	beq	r4,zero,408c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
    4084:	00040ec0 	call	40ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
    4088:	00000306 	br	4098 <alt_exception+0x78>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
    408c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
    4090:	e8bfff17 	ldw	r2,-4(ea)
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
    4094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
    4098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
    409c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
    40a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
    40a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
    40a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
    40ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
    40b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
    40b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
    40b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
    40bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
    40c0:	d9c00817 	ldw	r7,32(sp)
#ifdef ALT_STACK_CHECK
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif
#endif

        ldw   r8,  36(sp)
    40c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
    40c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
    40cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
    40d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
    40d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
    40d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
    40dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
    40e0:	dbc01017 	ldw	r15,64(sp)
#endif

        ldw   sp,  76(sp)

#else
        addi  sp, sp, 76
    40e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
    40e8:	ef80083a 	eret

000040ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
    40ec:	deffff04 	addi	sp,sp,-4
    40f0:	dfc00015 	stw	ra,0(sp)
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
    40f4:	0009313a 	rdctl	r4,ipending
    40f8:	00c00044 	movi	r3,1
    40fc:	01400034 	movhi	r5,0
    4100:	29548c04 	addi	r5,r5,21040
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
    4104:	20c4703a 	and	r2,r4,r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
    4108:	18c7883a 	add	r3,r3,r3
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
    410c:	10000726 	beq	r2,zero,412c <alt_irq_handler+0x40>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
    4110:	29000117 	ldw	r4,4(r5)
    4114:	28800017 	ldw	r2,0(r5)
    4118:	103ee83a 	callr	r2
    411c:	0005313a 	rdctl	r2,ipending

    } while (1);

    active = alt_irq_pending ();
    
  } while (active);
    4120:	10000426 	beq	r2,zero,4134 <alt_irq_handler+0x48>
    4124:	1009883a 	mov	r4,r2
    4128:	003ff306 	br	40f8 <alt_irq_handler+0xc>
    412c:	29400204 	addi	r5,r5,8
    4130:	003ff406 	br	4104 <alt_irq_handler+0x18>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
    4134:	dfc00017 	ldw	ra,0(sp)
    4138:	dec00104 	addi	sp,sp,4
    413c:	f800283a 	ret

Disassembly of section .text:

00004140 <_start>:
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
    4140:	06c00034 	movhi	sp,0
    ori sp, sp, %lo(__alt_stack_pointer)
    4144:	dee00014 	ori	sp,sp,32768

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
    4148:	06800034 	movhi	gp,0
    ori gp, gp, %lo(_gp)
    414c:	d6b45614 	ori	gp,gp,53592
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
    4150:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
    4154:	10948714 	ori	r2,r2,21020

    movhi r3, %hi(__bss_end)
    4158:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
    415c:	18d4cc14 	ori	r3,r3,21296

    beq r2, r3, 1f
    4160:	10c00326 	beq	r2,r3,4170 <_start+0x30>

0:
    stw zero, (r2)
    4164:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
    4168:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
    416c:	10fffd36 	bltu	r2,r3,4164 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
    4170:	0004ad00 	call	4ad0 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
    4174:	0004b3c0 	call	4b3c <alt_main>

00004178 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
    4178:	003fff06 	br	4178 <alt_after_alt_main>

0000417c <disp_seven_seg>:
#include "alt_types.h"
#include "sys/alt_stdio.h"
#include <unistd.h>

alt_u16 disp_seven_seg(alt_u8 val) {
    switch (val) {
    417c:	21003fcc 	andi	r4,r4,255
    4180:	008003c4 	movi	r2,15
    4184:	11001936 	bltu	r2,r4,41ec <disp_seven_seg+0x70>
    4188:	2105883a 	add	r2,r4,r4
    418c:	1085883a 	add	r2,r2,r2
    4190:	00c00034 	movhi	r3,0
    4194:	18d06904 	addi	r3,r3,16804
    4198:	10c5883a 	add	r2,r2,r3
    419c:	10800017 	ldw	r2,0(r2)
    41a0:	1000683a 	jmp	r2
    41a4:	000041f4 	movhi	zero,263
    41a8:	000041fc 	xorhi	zero,zero,263
    41ac:	00004204 	movi	zero,264
    41b0:	0000420c 	andi	zero,zero,264
    41b4:	00004214 	movui	zero,264
    41b8:	0000421c 	xori	zero,zero,264
    41bc:	00004224 	muli	zero,zero,264
    41c0:	0000422c 	andhi	zero,zero,264
    41c4:	00004234 	movhi	zero,264
    41c8:	0000423c 	xorhi	zero,zero,264
    41cc:	00004244 	movi	zero,265
    41d0:	0000424c 	andi	zero,zero,265
    41d4:	00004254 	movui	zero,265
    41d8:	0000425c 	xori	zero,zero,265
    41dc:	00004264 	muli	zero,zero,265
    41e0:	000041e4 	muli	zero,zero,263
    41e4:	00800384 	movi	r2,14
    41e8:	f800283a 	ret
    41ec:	00801fc4 	movi	r2,127
    41f0:	f800283a 	ret
    41f4:	00801004 	movi	r2,64
    41f8:	f800283a 	ret
        case  0 : return 0x40;
    41fc:	00801e44 	movi	r2,121
    4200:	f800283a 	ret
        case  1 : return 0x79;
    4204:	00800904 	movi	r2,36
    4208:	f800283a 	ret
        case  2 : return 0x24;
    420c:	00800c04 	movi	r2,48
    4210:	f800283a 	ret
        case  3 : return 0x30;
    4214:	00800644 	movi	r2,25
    4218:	f800283a 	ret
        case  4 : return 0x19;
    421c:	00800484 	movi	r2,18
    4220:	f800283a 	ret
        case  5 : return 0x12;
    4224:	00800084 	movi	r2,2
    4228:	f800283a 	ret
        case  6 : return 0x02;
    422c:	00801e04 	movi	r2,120
    4230:	f800283a 	ret
        case  7 : return 0x78;
    4234:	0005883a 	mov	r2,zero
    4238:	f800283a 	ret
        case  8 : return 0x00;
    423c:	00800604 	movi	r2,24
    4240:	f800283a 	ret
        case  9 : return 0x18;
    4244:	00800204 	movi	r2,8
    4248:	f800283a 	ret
        case 10 : return 0x08;
    424c:	008000c4 	movi	r2,3
    4250:	f800283a 	ret
        case 11 : return 0x03;
    4254:	00801184 	movi	r2,70
    4258:	f800283a 	ret
        case 12 : return 0x46;
    425c:	00800844 	movi	r2,33
    4260:	f800283a 	ret
        case 13 : return 0x21;
    4264:	00800184 	movi	r2,6
        case 14 : return 0x06;
        case 15 : return 0x0e;
        default : return 0x7f;
    }
}        
    4268:	f800283a 	ret

0000426c <SW_GRPA_interrupt>:
void SW_GRPA_interrupt (int *amount) {

    alt_u8 selection;

    // Read and clear interrupt from Register 3
    selection = (alt_u8) (IORD(SWITCH_GRPA_I_BASE, 3) & 0xff);
    426c:	00a41714 	movui	r2,36956
    4270:	10c00037 	ldwio	r3,0(r2)
    IOWR(SWITCH_GRPA_I_BASE, 3, 0x0);
    4274:	10000035 	stwio	zero,0(r2)
    // accumulate amount
    switch (selection) {
    4278:	18c03fcc 	andi	r3,r3,255
    427c:	00800084 	movi	r2,2
    4280:	18800926 	beq	r3,r2,42a8 <SW_GRPA_interrupt+0x3c>
    4284:	10c00336 	bltu	r2,r3,4294 <SW_GRPA_interrupt+0x28>
    4288:	00800044 	movi	r2,1
    428c:	18800f1e 	bne	r3,r2,42cc <SW_GRPA_interrupt+0x60>
    4290:	00000506 	br	42a8 <SW_GRPA_interrupt+0x3c>
    4294:	00800104 	movi	r2,4
    4298:	18800626 	beq	r3,r2,42b4 <SW_GRPA_interrupt+0x48>
    429c:	00800204 	movi	r2,8
    42a0:	18800a1e 	bne	r3,r2,42cc <SW_GRPA_interrupt+0x60>
    42a4:	00000606 	br	42c0 <SW_GRPA_interrupt+0x54>
	case 1:
		*amount += 1;
		break;
	case 2:
		*amount += 2;
    42a8:	20800017 	ldw	r2,0(r4)
    42ac:	10c5883a 	add	r2,r2,r3
    42b0:	00000506 	br	42c8 <SW_GRPA_interrupt+0x5c>
		break;
	case 4:
		*amount += 5;
    42b4:	20800017 	ldw	r2,0(r4)
    42b8:	10800144 	addi	r2,r2,5
    42bc:	00000206 	br	42c8 <SW_GRPA_interrupt+0x5c>
		break;
	case 8:
		*amount += 10;
    42c0:	20800017 	ldw	r2,0(r4)
    42c4:	10800284 	addi	r2,r2,10
    42c8:	20800015 	stw	r2,0(r4)
		break;
    }

    // position 0 of green led on
    IOWR(LED_GREEN_O_BASE, 0, 0x1);
    42cc:	00c00044 	movi	r3,1
    42d0:	00a40814 	movui	r2,36896
    42d4:	10c00035 	stwio	r3,0(r2)
}
    42d8:	f800283a 	ret

000042dc <purchase>:

void purchase(int *amount, int balance) {
    42dc:	defffd04 	addi	sp,sp,-12
    42e0:	dc400115 	stw	r17,4(sp)
    42e4:	2023883a 	mov	r17,r4
    if (*amount >= balance) {
    42e8:	21000017 	ldw	r4,0(r4)

    // position 0 of green led on
    IOWR(LED_GREEN_O_BASE, 0, 0x1);
}

void purchase(int *amount, int balance) {
    42ec:	dfc00215 	stw	ra,8(sp)
    42f0:	dc000015 	stw	r16,0(sp)
    if (*amount >= balance) {
    42f4:	21409016 	blt	r4,r5,4538 <purchase+0x25c>
		if ((*amount = *amount - balance) > 0) {
    42f8:	2149c83a 	sub	r4,r4,r5
    42fc:	89000015 	stw	r4,0(r17)
    4300:	01007f0e 	bge	zero,r4,4500 <purchase+0x224>
#include "alt_types.h"
#include "sys/alt_stdio.h"
#include <unistd.h>

alt_u16 disp_seven_seg(alt_u8 val) {
    switch (val) {
    4304:	01400284 	movi	r5,10
    4308:	00049a00 	call	49a0 <__modsi3>
    430c:	10c03fcc 	andi	r3,r2,255
    4310:	008003c4 	movi	r2,15
    4314:	10c01936 	bltu	r2,r3,437c <purchase+0xa0>
    4318:	18c5883a 	add	r2,r3,r3
    431c:	1085883a 	add	r2,r2,r2
    4320:	00c00034 	movhi	r3,0
    4324:	18d0cd04 	addi	r3,r3,17204
    4328:	10c5883a 	add	r2,r2,r3
    432c:	10800017 	ldw	r2,0(r2)
    4330:	1000683a 	jmp	r2
    4334:	00004384 	movi	zero,270
    4338:	0000438c 	andi	zero,zero,270
    433c:	00004394 	movui	zero,270
    4340:	0000439c 	xori	zero,zero,270
    4344:	000043a4 	muli	zero,zero,270
    4348:	000043ac 	andhi	zero,zero,270
    434c:	000043b4 	movhi	zero,270
    4350:	000043bc 	xorhi	zero,zero,270
    4354:	000043c4 	movi	zero,271
    4358:	000043cc 	andi	zero,zero,271
    435c:	000043d4 	movui	zero,271
    4360:	000043dc 	xori	zero,zero,271
    4364:	000043e4 	muli	zero,zero,271
    4368:	000043ec 	andhi	zero,zero,271
    436c:	000043f4 	movhi	zero,271
    4370:	00004374 	movhi	zero,269
    4374:	00c00384 	movi	r3,14
    4378:	00001f06 	br	43f8 <purchase+0x11c>
    437c:	00c01fc4 	movi	r3,127
    4380:	00001d06 	br	43f8 <purchase+0x11c>
    4384:	00c01004 	movi	r3,64
    4388:	00001b06 	br	43f8 <purchase+0x11c>
    438c:	00c01e44 	movi	r3,121
    4390:	00001906 	br	43f8 <purchase+0x11c>
    4394:	00c00904 	movi	r3,36
    4398:	00001706 	br	43f8 <purchase+0x11c>
    439c:	00c00c04 	movi	r3,48
    43a0:	00001506 	br	43f8 <purchase+0x11c>
    43a4:	00c00644 	movi	r3,25
    43a8:	00001306 	br	43f8 <purchase+0x11c>
    43ac:	00c00484 	movi	r3,18
    43b0:	00001106 	br	43f8 <purchase+0x11c>
    43b4:	00c00084 	movi	r3,2
    43b8:	00000f06 	br	43f8 <purchase+0x11c>
    43bc:	00c01e04 	movi	r3,120
    43c0:	00000d06 	br	43f8 <purchase+0x11c>
    43c4:	0007883a 	mov	r3,zero
    43c8:	00000b06 	br	43f8 <purchase+0x11c>
    43cc:	00c00604 	movi	r3,24
    43d0:	00000906 	br	43f8 <purchase+0x11c>
    43d4:	00c00204 	movi	r3,8
    43d8:	00000706 	br	43f8 <purchase+0x11c>
    43dc:	00c000c4 	movi	r3,3
    43e0:	00000506 	br	43f8 <purchase+0x11c>
    43e4:	00c01184 	movi	r3,70
    43e8:	00000306 	br	43f8 <purchase+0x11c>
    43ec:	00c00844 	movi	r3,33
    43f0:	00000106 	br	43f8 <purchase+0x11c>
    43f4:	00c00184 	movi	r3,6
}

void purchase(int *amount, int balance) {
    if (*amount >= balance) {
		if ((*amount = *amount - balance) > 0) {
				IOWR(SEVEN_SEGMENT_N_O_0_BASE, 0, disp_seven_seg(*amount % 10));
    43f8:	00a40c14 	movui	r2,36912
    43fc:	10c00035 	stwio	r3,0(r2)
#include "alt_types.h"
#include "sys/alt_stdio.h"
#include <unistd.h>

alt_u16 disp_seven_seg(alt_u8 val) {
    switch (val) {
    4400:	89000017 	ldw	r4,0(r17)
    4404:	01400284 	movi	r5,10
    4408:	00049400 	call	4940 <__divsi3>
    440c:	10c03fcc 	andi	r3,r2,255
    4410:	008003c4 	movi	r2,15
    4414:	10c01936 	bltu	r2,r3,447c <purchase+0x1a0>
    4418:	18c5883a 	add	r2,r3,r3
    441c:	1085883a 	add	r2,r2,r2
    4420:	00c00034 	movhi	r3,0
    4424:	18d10d04 	addi	r3,r3,17460
    4428:	10c5883a 	add	r2,r2,r3
    442c:	10800017 	ldw	r2,0(r2)
    4430:	1000683a 	jmp	r2
    4434:	00004484 	movi	zero,274
    4438:	0000448c 	andi	zero,zero,274
    443c:	00004494 	movui	zero,274
    4440:	0000449c 	xori	zero,zero,274
    4444:	000044a4 	muli	zero,zero,274
    4448:	000044ac 	andhi	zero,zero,274
    444c:	000044b4 	movhi	zero,274
    4450:	000044bc 	xorhi	zero,zero,274
    4454:	000044c4 	movi	zero,275
    4458:	000044cc 	andi	zero,zero,275
    445c:	000044d4 	movui	zero,275
    4460:	000044dc 	xori	zero,zero,275
    4464:	000044e4 	muli	zero,zero,275
    4468:	000044ec 	andhi	zero,zero,275
    446c:	000044f4 	movhi	zero,275
    4470:	00004474 	movhi	zero,273
    4474:	00c00384 	movi	r3,14
    4478:	00001f06 	br	44f8 <purchase+0x21c>
    447c:	00c01fc4 	movi	r3,127
    4480:	00001d06 	br	44f8 <purchase+0x21c>
    4484:	00c01004 	movi	r3,64
    4488:	00001b06 	br	44f8 <purchase+0x21c>
    448c:	00c01e44 	movi	r3,121
    4490:	00001906 	br	44f8 <purchase+0x21c>
    4494:	00c00904 	movi	r3,36
    4498:	00001706 	br	44f8 <purchase+0x21c>
    449c:	00c00c04 	movi	r3,48
    44a0:	00001506 	br	44f8 <purchase+0x21c>
    44a4:	00c00644 	movi	r3,25
    44a8:	00001306 	br	44f8 <purchase+0x21c>
    44ac:	00c00484 	movi	r3,18
    44b0:	00001106 	br	44f8 <purchase+0x21c>
    44b4:	00c00084 	movi	r3,2
    44b8:	00000f06 	br	44f8 <purchase+0x21c>
    44bc:	00c01e04 	movi	r3,120
    44c0:	00000d06 	br	44f8 <purchase+0x21c>
    44c4:	0007883a 	mov	r3,zero
    44c8:	00000b06 	br	44f8 <purchase+0x21c>
    44cc:	00c00604 	movi	r3,24
    44d0:	00000906 	br	44f8 <purchase+0x21c>
    44d4:	00c00204 	movi	r3,8
    44d8:	00000706 	br	44f8 <purchase+0x21c>
    44dc:	00c000c4 	movi	r3,3
    44e0:	00000506 	br	44f8 <purchase+0x21c>
    44e4:	00c01184 	movi	r3,70
    44e8:	00000306 	br	44f8 <purchase+0x21c>
    44ec:	00c00844 	movi	r3,33
    44f0:	00000106 	br	44f8 <purchase+0x21c>
    44f4:	00c00184 	movi	r3,6

void purchase(int *amount, int balance) {
    if (*amount >= balance) {
		if ((*amount = *amount - balance) > 0) {
				IOWR(SEVEN_SEGMENT_N_O_0_BASE, 0, disp_seven_seg(*amount % 10));
				IOWR(SEVEN_SEGMENT_N_O_1_BASE, 0, disp_seven_seg(*amount / 10));
    44f8:	00a41014 	movui	r2,36928
    44fc:	10c00035 	stwio	r3,0(r2)
		}
		IOWR(LED_GREEN_O_BASE,0,0x4);
    4500:	04240814 	movui	r16,36896
    4504:	00800104 	movi	r2,4
    4508:	80800035 	stwio	r2,0(r16)
		usleep(2000000);
    450c:	010007f4 	movhi	r4,31
    4510:	21212004 	addi	r4,r4,-31616
    4514:	0004ba00 	call	4ba0 <usleep>

		// done transaction
		*amount = 0;
    4518:	88000015 	stw	zero,0(r17)
		IOWR(LED_GREEN_O_BASE,0,0x0);
    451c:	80000035 	stwio	zero,0(r16)
        IOWR(SEVEN_SEGMENT_N_O_0_BASE, 0, disp_seven_seg(16));
    4520:	00c01fc4 	movi	r3,127
    4524:	00a40c14 	movui	r2,36912
    4528:	10c00035 	stwio	r3,0(r2)
        IOWR(SEVEN_SEGMENT_N_O_1_BASE, 0, disp_seven_seg(16));
    452c:	00a41014 	movui	r2,36928
    4530:	10c00035 	stwio	r3,0(r2)
    4534:	00000806 	br	4558 <purchase+0x27c>
    } else {
		IOWR(LED_GREEN_O_BASE,0,0x9);
    4538:	04240814 	movui	r16,36896
    453c:	00800244 	movi	r2,9
    4540:	80800035 	stwio	r2,0(r16)
		usleep(1500000);
    4544:	010005f4 	movhi	r4,23
    4548:	2138d804 	addi	r4,r4,-7328
    454c:	0004ba00 	call	4ba0 <usleep>
		IOWR(LED_GREEN_O_BASE,0,0x1);
    4550:	00800044 	movi	r2,1
    4554:	80800035 	stwio	r2,0(r16)
    }
}
    4558:	dfc00217 	ldw	ra,8(sp)
    455c:	dc400117 	ldw	r17,4(sp)
    4560:	dc000017 	ldw	r16,0(sp)
    4564:	dec00304 	addi	sp,sp,12
    4568:	f800283a 	ret

0000456c <main>:
        }
    }
}

int main()
{ 
    456c:	defffd04 	addi	sp,sp,-12
    volatile int amount = 0;
    alt_putstr("Exercise 3 is running!\n");
    4570:	01000034 	movhi	r4,0
    4574:	21142604 	addi	r4,r4,20632
        }
    }
}

int main()
{ 
    4578:	dfc00215 	stw	ra,8(sp)
    457c:	dc000115 	stw	r16,4(sp)
    volatile int amount = 0;
    4580:	d8000015 	stw	zero,0(sp)
    alt_putstr("Exercise 3 is running!\n");
    4584:	0004b680 	call	4b68 <alt_putstr>

    IOWR(SWITCH_GRPA_I_BASE, 3, 0x0);
    4588:	00a41714 	movui	r2,36956
    458c:	10000035 	stwio	zero,0(r2)
    IOWR(SWITCH_GRPA_I_BASE, 2, 0xF);
    4590:	040003c4 	movi	r16,15
    4594:	00a41614 	movui	r2,36952
    4598:	14000035 	stwio	r16,0(r2)
    alt_irq_register(SWITCH_GRPA_I_IRQ, &amount, (void *)SW_GRPA_interrupt);
    459c:	01000044 	movi	r4,1
    45a0:	d80b883a 	mov	r5,sp
    45a4:	01800034 	movhi	r6,0
    45a8:	31909b04 	addi	r6,r6,17004
    45ac:	0004a100 	call	4a10 <alt_irq_register>

    IOWR(SWITCH_GRPB_I_BASE, 3, 0x0);
    45b0:	00a40314 	movui	r2,36876
    45b4:	10000035 	stwio	zero,0(r2)
    IOWR(SWITCH_GRPB_I_BASE, 2, 0xF);
    45b8:	00a40214 	movui	r2,36872
    45bc:	14000035 	stwio	r16,0(r2)
    alt_irq_register(SWITCH_GRPB_I_IRQ, &amount, (void *)SW_GRPB_interrupt);
    45c0:	0009883a 	mov	r4,zero
    45c4:	d80b883a 	mov	r5,sp
    45c8:	01800034 	movhi	r6,0
    45cc:	31917d04 	addi	r6,r6,17908
    45d0:	0004a100 	call	4a10 <alt_irq_register>


    IOWR(SEVEN_SEGMENT_N_O_0_BASE, 0, disp_seven_seg(16));
    45d4:	00c01fc4 	movi	r3,127
    45d8:	00a40c14 	movui	r2,36912
    45dc:	10c00035 	stwio	r3,0(r2)
    IOWR(SEVEN_SEGMENT_N_O_1_BASE, 0, disp_seven_seg(16));
    45e0:	00a41014 	movui	r2,36928
    45e4:	10c00035 	stwio	r3,0(r2)

    IOWR(LED_GREEN_O_BASE, 0, 0x0);
    45e8:	00a40814 	movui	r2,36896
    45ec:	10000035 	stwio	zero,0(r2)
    45f0:	003fff06 	br	45f0 <main+0x84>

000045f4 <SW_GRPB_interrupt>:
		IOWR(LED_GREEN_O_BASE,0,0x1);
    }
}

// ISR for Group B Switches
void SW_GRPB_interrupt (int *amount) {
    45f4:	defffc04 	addi	sp,sp,-16
    45f8:	dc800215 	stw	r18,8(sp)
    45fc:	dfc00315 	stw	ra,12(sp)
    4600:	dc400115 	stw	r17,4(sp)
    4604:	dc000015 	stw	r16,0(sp)
    4608:	2025883a 	mov	r18,r4

    alt_u8 selection;

    // Read and clear interrupt
    selection = (alt_u8) (IORD(SWITCH_GRPB_I_BASE, 3) & 0xff);
    460c:	00a40314 	movui	r2,36876
    4610:	10c00037 	ldwio	r3,0(r2)
    IOWR(SWITCH_GRPB_I_BASE, 3, 0x0);
    4614:	10000035 	stwio	zero,0(r2)

    // Update amount
    if (*amount > 0) { // if there is an active transaction
    4618:	21400017 	ldw	r5,0(r4)
    461c:	0140a30e 	bge	zero,r5,48ac <SW_GRPB_interrupt+0x2b8>
        switch (selection) {
    4620:	18c03fcc 	andi	r3,r3,255
    4624:	00800084 	movi	r2,2
    4628:	18800b26 	beq	r3,r2,4658 <SW_GRPB_interrupt+0x64>
    462c:	10c00336 	bltu	r2,r3,463c <SW_GRPB_interrupt+0x48>
    4630:	00800044 	movi	r2,1
    4634:	18809d1e 	bne	r3,r2,48ac <SW_GRPB_interrupt+0x2b8>
    4638:	00000506 	br	4650 <SW_GRPB_interrupt+0x5c>
    463c:	00800104 	movi	r2,4
    4640:	18800c26 	beq	r3,r2,4674 <SW_GRPB_interrupt+0x80>
    4644:	00800204 	movi	r2,8
    4648:	1880981e 	bne	r3,r2,48ac <SW_GRPB_interrupt+0x2b8>
    464c:	00000b06 	br	467c <SW_GRPB_interrupt+0x88>
            case 0x1:  // ticket to Montreal $41
		      purchase(amount, 41);
    4650:	01400a44 	movi	r5,41
    4654:	00000106 	br	465c <SW_GRPB_interrupt+0x68>
		    break;
	        case 0x2:  // ticket to Ottawa $32
		      purchase(amount, 32);
    4658:	01400804 	movi	r5,32
        	  IOWR(SEVEN_SEGMENT_N_O_0_BASE, 0, disp_seven_seg(16));
        	  IOWR(SEVEN_SEGMENT_N_O_1_BASE, 0, disp_seven_seg(16));
		    break;
        }
    }
}
    465c:	dfc00317 	ldw	ra,12(sp)
    4660:	dc800217 	ldw	r18,8(sp)
    4664:	dc400117 	ldw	r17,4(sp)
    4668:	dc000017 	ldw	r16,0(sp)
    466c:	dec00404 	addi	sp,sp,16
        switch (selection) {
            case 0x1:  // ticket to Montreal $41
		      purchase(amount, 41);
		    break;
	        case 0x2:  // ticket to Ottawa $32
		      purchase(amount, 32);
    4670:	00042dc1 	jmpi	42dc <purchase>
		    break;
	        case 0x4:  // ticket to Toronto $15
		      purchase(amount, 15);
    4674:	014003c4 	movi	r5,15
    4678:	003ff806 	br	465c <SW_GRPB_interrupt+0x68>
#include "alt_types.h"
#include "sys/alt_stdio.h"
#include <unistd.h>

alt_u16 disp_seven_seg(alt_u8 val) {
    switch (val) {
    467c:	2809883a 	mov	r4,r5
    4680:	01400284 	movi	r5,10
    4684:	00049a00 	call	49a0 <__modsi3>
    4688:	10c03fcc 	andi	r3,r2,255
    468c:	008003c4 	movi	r2,15
    4690:	10c01936 	bltu	r2,r3,46f8 <SW_GRPB_interrupt+0x104>
    4694:	18c5883a 	add	r2,r3,r3
    4698:	1085883a 	add	r2,r2,r2
    469c:	00c00034 	movhi	r3,0
    46a0:	18d1ac04 	addi	r3,r3,18096
    46a4:	10c5883a 	add	r2,r2,r3
    46a8:	10800017 	ldw	r2,0(r2)
    46ac:	1000683a 	jmp	r2
    46b0:	00004700 	call	470 <__alt_mem_onchip_memory2_0-0x3b90>
    46b4:	00004708 	cmpgei	zero,zero,284
    46b8:	00004710 	cmplti	zero,zero,284
    46bc:	00004718 	cmpnei	zero,zero,284
    46c0:	00004720 	cmpeqi	zero,zero,284
    46c4:	00004728 	cmpgeui	zero,zero,284
    46c8:	00004730 	cmpltui	zero,zero,284
    46cc:	00004738 	rdprs	zero,zero,284
    46d0:	00004740 	call	474 <__alt_mem_onchip_memory2_0-0x3b8c>
    46d4:	00004748 	cmpgei	zero,zero,285
    46d8:	00004750 	cmplti	zero,zero,285
    46dc:	00004758 	cmpnei	zero,zero,285
    46e0:	00004760 	cmpeqi	zero,zero,285
    46e4:	00004768 	cmpgeui	zero,zero,285
    46e8:	00004770 	cmpltui	zero,zero,285
    46ec:	000046f0 	cmpltui	zero,zero,283
    46f0:	00c00384 	movi	r3,14
    46f4:	00001f06 	br	4774 <SW_GRPB_interrupt+0x180>
    46f8:	00c01fc4 	movi	r3,127
    46fc:	00001d06 	br	4774 <SW_GRPB_interrupt+0x180>
    4700:	00c01004 	movi	r3,64
    4704:	00001b06 	br	4774 <SW_GRPB_interrupt+0x180>
    4708:	00c01e44 	movi	r3,121
    470c:	00001906 	br	4774 <SW_GRPB_interrupt+0x180>
    4710:	00c00904 	movi	r3,36
    4714:	00001706 	br	4774 <SW_GRPB_interrupt+0x180>
    4718:	00c00c04 	movi	r3,48
    471c:	00001506 	br	4774 <SW_GRPB_interrupt+0x180>
    4720:	00c00644 	movi	r3,25
    4724:	00001306 	br	4774 <SW_GRPB_interrupt+0x180>
    4728:	00c00484 	movi	r3,18
    472c:	00001106 	br	4774 <SW_GRPB_interrupt+0x180>
    4730:	00c00084 	movi	r3,2
    4734:	00000f06 	br	4774 <SW_GRPB_interrupt+0x180>
    4738:	00c01e04 	movi	r3,120
    473c:	00000d06 	br	4774 <SW_GRPB_interrupt+0x180>
    4740:	0007883a 	mov	r3,zero
    4744:	00000b06 	br	4774 <SW_GRPB_interrupt+0x180>
    4748:	00c00604 	movi	r3,24
    474c:	00000906 	br	4774 <SW_GRPB_interrupt+0x180>
    4750:	00c00204 	movi	r3,8
    4754:	00000706 	br	4774 <SW_GRPB_interrupt+0x180>
    4758:	00c000c4 	movi	r3,3
    475c:	00000506 	br	4774 <SW_GRPB_interrupt+0x180>
    4760:	00c01184 	movi	r3,70
    4764:	00000306 	br	4774 <SW_GRPB_interrupt+0x180>
    4768:	00c00844 	movi	r3,33
    476c:	00000106 	br	4774 <SW_GRPB_interrupt+0x180>
    4770:	00c00184 	movi	r3,6
		    break;
	        case 0x4:  // ticket to Toronto $15
		      purchase(amount, 15);
		    break;
	        case 0x8:  // cancel
              IOWR(SEVEN_SEGMENT_N_O_0_BASE, 0, disp_seven_seg(*amount % 10));
    4774:	00a40c14 	movui	r2,36912
    4778:	10c00035 	stwio	r3,0(r2)
#include "alt_types.h"
#include "sys/alt_stdio.h"
#include <unistd.h>

alt_u16 disp_seven_seg(alt_u8 val) {
    switch (val) {
    477c:	91000017 	ldw	r4,0(r18)
    4780:	01400284 	movi	r5,10
    4784:	00049400 	call	4940 <__divsi3>
    4788:	10c03fcc 	andi	r3,r2,255
    478c:	008003c4 	movi	r2,15
    4790:	10c01936 	bltu	r2,r3,47f8 <SW_GRPB_interrupt+0x204>
    4794:	18c5883a 	add	r2,r3,r3
    4798:	1085883a 	add	r2,r2,r2
    479c:	00c00034 	movhi	r3,0
    47a0:	18d1ec04 	addi	r3,r3,18352
    47a4:	10c5883a 	add	r2,r2,r3
    47a8:	10800017 	ldw	r2,0(r2)
    47ac:	1000683a 	jmp	r2
    47b0:	00004800 	call	480 <__alt_mem_onchip_memory2_0-0x3b80>
    47b4:	00004808 	cmpgei	zero,zero,288
    47b8:	00004810 	cmplti	zero,zero,288
    47bc:	00004818 	cmpnei	zero,zero,288
    47c0:	00004820 	cmpeqi	zero,zero,288
    47c4:	00004828 	cmpgeui	zero,zero,288
    47c8:	00004830 	cmpltui	zero,zero,288
    47cc:	00004838 	rdprs	zero,zero,288
    47d0:	00004840 	call	484 <__alt_mem_onchip_memory2_0-0x3b7c>
    47d4:	00004848 	cmpgei	zero,zero,289
    47d8:	00004850 	cmplti	zero,zero,289
    47dc:	00004858 	cmpnei	zero,zero,289
    47e0:	00004860 	cmpeqi	zero,zero,289
    47e4:	00004868 	cmpgeui	zero,zero,289
    47e8:	00004870 	cmpltui	zero,zero,289
    47ec:	000047f0 	cmpltui	zero,zero,287
    47f0:	00800384 	movi	r2,14
    47f4:	00001f06 	br	4874 <SW_GRPB_interrupt+0x280>
    47f8:	00801fc4 	movi	r2,127
    47fc:	00001d06 	br	4874 <SW_GRPB_interrupt+0x280>
    4800:	00801004 	movi	r2,64
    4804:	00001b06 	br	4874 <SW_GRPB_interrupt+0x280>
    4808:	00801e44 	movi	r2,121
    480c:	00001906 	br	4874 <SW_GRPB_interrupt+0x280>
    4810:	00800904 	movi	r2,36
    4814:	00001706 	br	4874 <SW_GRPB_interrupt+0x280>
    4818:	00800c04 	movi	r2,48
    481c:	00001506 	br	4874 <SW_GRPB_interrupt+0x280>
    4820:	00800644 	movi	r2,25
    4824:	00001306 	br	4874 <SW_GRPB_interrupt+0x280>
    4828:	00800484 	movi	r2,18
    482c:	00001106 	br	4874 <SW_GRPB_interrupt+0x280>
    4830:	00800084 	movi	r2,2
    4834:	00000f06 	br	4874 <SW_GRPB_interrupt+0x280>
    4838:	00801e04 	movi	r2,120
    483c:	00000d06 	br	4874 <SW_GRPB_interrupt+0x280>
    4840:	0005883a 	mov	r2,zero
    4844:	00000b06 	br	4874 <SW_GRPB_interrupt+0x280>
    4848:	00800604 	movi	r2,24
    484c:	00000906 	br	4874 <SW_GRPB_interrupt+0x280>
    4850:	00800204 	movi	r2,8
    4854:	00000706 	br	4874 <SW_GRPB_interrupt+0x280>
    4858:	008000c4 	movi	r2,3
    485c:	00000506 	br	4874 <SW_GRPB_interrupt+0x280>
    4860:	00801184 	movi	r2,70
    4864:	00000306 	br	4874 <SW_GRPB_interrupt+0x280>
    4868:	00800844 	movi	r2,33
    486c:	00000106 	br	4874 <SW_GRPB_interrupt+0x280>
    4870:	00800184 	movi	r2,6
	        case 0x4:  // ticket to Toronto $15
		      purchase(amount, 15);
		    break;
	        case 0x8:  // cancel
              IOWR(SEVEN_SEGMENT_N_O_0_BASE, 0, disp_seven_seg(*amount % 10));
              IOWR(SEVEN_SEGMENT_N_O_1_BASE, 0, disp_seven_seg(*amount / 10));
    4874:	04641014 	movui	r17,36928
    4878:	88800035 	stwio	r2,0(r17)
	          IOWR(LED_GREEN_O_BASE,0,0x2);
    487c:	04240814 	movui	r16,36896
    4880:	00800084 	movi	r2,2
    4884:	80800035 	stwio	r2,0(r16)
	          usleep(2500000);
    4888:	010009b4 	movhi	r4,38
    488c:	21096804 	addi	r4,r4,9632
    4890:	0004ba00 	call	4ba0 <usleep>

		      // close transaction
		      *amount = 0;
    4894:	90000015 	stw	zero,0(r18)
		      IOWR(LED_GREEN_O_BASE,0,0x0);
    4898:	80000035 	stwio	zero,0(r16)
        	  IOWR(SEVEN_SEGMENT_N_O_0_BASE, 0, disp_seven_seg(16));
    489c:	00c01fc4 	movi	r3,127
    48a0:	00a40c14 	movui	r2,36912
    48a4:	10c00035 	stwio	r3,0(r2)
        	  IOWR(SEVEN_SEGMENT_N_O_1_BASE, 0, disp_seven_seg(16));
    48a8:	88c00035 	stwio	r3,0(r17)
		    break;
        }
    }
}
    48ac:	dfc00317 	ldw	ra,12(sp)
    48b0:	dc800217 	ldw	r18,8(sp)
    48b4:	dc400117 	ldw	r17,4(sp)
    48b8:	dc000017 	ldw	r16,0(sp)
    48bc:	dec00404 	addi	sp,sp,16
    48c0:	f800283a 	ret

000048c4 <udivmodsi4>:
    48c4:	29001b2e 	bgeu	r5,r4,4934 <udivmodsi4+0x70>
    48c8:	28001a16 	blt	r5,zero,4934 <udivmodsi4+0x70>
    48cc:	00800044 	movi	r2,1
    48d0:	0007883a 	mov	r3,zero
    48d4:	01c007c4 	movi	r7,31
    48d8:	00000306 	br	48e8 <udivmodsi4+0x24>
    48dc:	19c01326 	beq	r3,r7,492c <udivmodsi4+0x68>
    48e0:	18c00044 	addi	r3,r3,1
    48e4:	28000416 	blt	r5,zero,48f8 <udivmodsi4+0x34>
    48e8:	294b883a 	add	r5,r5,r5
    48ec:	1085883a 	add	r2,r2,r2
    48f0:	293ffa36 	bltu	r5,r4,48dc <udivmodsi4+0x18>
    48f4:	10000d26 	beq	r2,zero,492c <udivmodsi4+0x68>
    48f8:	0007883a 	mov	r3,zero
    48fc:	21400236 	bltu	r4,r5,4908 <udivmodsi4+0x44>
    4900:	2149c83a 	sub	r4,r4,r5
    4904:	1886b03a 	or	r3,r3,r2
    4908:	1004d07a 	srli	r2,r2,1
    490c:	280ad07a 	srli	r5,r5,1
    4910:	103ffa1e 	bne	r2,zero,48fc <udivmodsi4+0x38>
    4914:	30000226 	beq	r6,zero,4920 <udivmodsi4+0x5c>
    4918:	2005883a 	mov	r2,r4
    491c:	f800283a 	ret
    4920:	1809883a 	mov	r4,r3
    4924:	2005883a 	mov	r2,r4
    4928:	f800283a 	ret
    492c:	0007883a 	mov	r3,zero
    4930:	003ff806 	br	4914 <udivmodsi4+0x50>
    4934:	00800044 	movi	r2,1
    4938:	0007883a 	mov	r3,zero
    493c:	003fef06 	br	48fc <udivmodsi4+0x38>

00004940 <__divsi3>:
    4940:	defffe04 	addi	sp,sp,-8
    4944:	dc000015 	stw	r16,0(sp)
    4948:	dfc00115 	stw	ra,4(sp)
    494c:	0021883a 	mov	r16,zero
    4950:	20000c16 	blt	r4,zero,4984 <__divsi3+0x44>
    4954:	000d883a 	mov	r6,zero
    4958:	28000e16 	blt	r5,zero,4994 <__divsi3+0x54>
    495c:	00048c40 	call	48c4 <udivmodsi4>
    4960:	1007883a 	mov	r3,r2
    4964:	8005003a 	cmpeq	r2,r16,zero
    4968:	1000011e 	bne	r2,zero,4970 <__divsi3+0x30>
    496c:	00c7c83a 	sub	r3,zero,r3
    4970:	1805883a 	mov	r2,r3
    4974:	dfc00117 	ldw	ra,4(sp)
    4978:	dc000017 	ldw	r16,0(sp)
    497c:	dec00204 	addi	sp,sp,8
    4980:	f800283a 	ret
    4984:	0109c83a 	sub	r4,zero,r4
    4988:	04000044 	movi	r16,1
    498c:	000d883a 	mov	r6,zero
    4990:	283ff20e 	bge	r5,zero,495c <__divsi3+0x1c>
    4994:	014bc83a 	sub	r5,zero,r5
    4998:	8021003a 	cmpeq	r16,r16,zero
    499c:	003fef06 	br	495c <__divsi3+0x1c>

000049a0 <__modsi3>:
    49a0:	deffff04 	addi	sp,sp,-4
    49a4:	dfc00015 	stw	ra,0(sp)
    49a8:	01800044 	movi	r6,1
    49ac:	2807883a 	mov	r3,r5
    49b0:	20000416 	blt	r4,zero,49c4 <__modsi3+0x24>
    49b4:	28000c16 	blt	r5,zero,49e8 <__modsi3+0x48>
    49b8:	dfc00017 	ldw	ra,0(sp)
    49bc:	dec00104 	addi	sp,sp,4
    49c0:	00048c41 	jmpi	48c4 <udivmodsi4>
    49c4:	0109c83a 	sub	r4,zero,r4
    49c8:	28000b16 	blt	r5,zero,49f8 <__modsi3+0x58>
    49cc:	180b883a 	mov	r5,r3
    49d0:	01800044 	movi	r6,1
    49d4:	00048c40 	call	48c4 <udivmodsi4>
    49d8:	0085c83a 	sub	r2,zero,r2
    49dc:	dfc00017 	ldw	ra,0(sp)
    49e0:	dec00104 	addi	sp,sp,4
    49e4:	f800283a 	ret
    49e8:	014bc83a 	sub	r5,zero,r5
    49ec:	dfc00017 	ldw	ra,0(sp)
    49f0:	dec00104 	addi	sp,sp,4
    49f4:	00048c41 	jmpi	48c4 <udivmodsi4>
    49f8:	0147c83a 	sub	r3,zero,r5
    49fc:	003ff306 	br	49cc <__modsi3+0x2c>

00004a00 <__udivsi3>:
    4a00:	000d883a 	mov	r6,zero
    4a04:	00048c41 	jmpi	48c4 <udivmodsi4>

00004a08 <__umodsi3>:
    4a08:	01800044 	movi	r6,1
    4a0c:	00048c41 	jmpi	48c4 <udivmodsi4>

00004a10 <alt_irq_register>:
                      alt_isr_func handler)
{
  int rc = -EINVAL;  
  alt_irq_context status;

  if (id < ALT_NIRQ)
    4a10:	008007c4 	movi	r2,31
 */
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
    4a14:	200f883a 	mov	r7,r4
  int rc = -EINVAL;  
  alt_irq_context status;

  if (id < ALT_NIRQ)
    4a18:	00fffa84 	movi	r3,-22
    4a1c:	11002236 	bltu	r2,r4,4aa8 <alt_irq_register+0x98>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    4a20:	0015303a 	rdctl	r10,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    4a24:	027fff84 	movi	r9,-2
    4a28:	5244703a 	and	r2,r10,r9
    4a2c:	1001703a 	wrctl	status,r2
     * state.
     */

    status = alt_irq_disable_all ();

    alt_irq[id].handler = handler;
    4a30:	200490fa 	slli	r2,r4,3
    4a34:	00c00034 	movhi	r3,0
    4a38:	18d48c04 	addi	r3,r3,21040
    4a3c:	02000034 	movhi	r8,0
    4a40:	42148704 	addi	r8,r8,21020
    4a44:	10c5883a 	add	r2,r2,r3
    alt_irq[id].context = context;
    4a48:	11400115 	stw	r5,4(r2)
     * state.
     */

    status = alt_irq_disable_all ();

    alt_irq[id].handler = handler;
    4a4c:	11800015 	stw	r6,0(r2)
    alt_irq[id].context = context;

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
    4a50:	30000826 	beq	r6,zero,4a74 <alt_irq_register+0x64>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    4a54:	0009303a 	rdctl	r4,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    4a58:	2244703a 	and	r2,r4,r9
    4a5c:	1001703a 	wrctl	status,r2
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();

  alt_irq_active |= (1 << id);
    4a60:	00c00044 	movi	r3,1
    4a64:	19c6983a 	sll	r3,r3,r7
    4a68:	40800017 	ldw	r2,0(r8)
    4a6c:	10c4b03a 	or	r2,r2,r3
    4a70:	00000706 	br	4a90 <alt_irq_register+0x80>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    4a74:	0009303a 	rdctl	r4,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    4a78:	2244703a 	and	r2,r4,r9
    4a7c:	1001703a 	wrctl	status,r2
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();

  alt_irq_active &= ~(1 << id);
    4a80:	00ffff84 	movi	r3,-2
    4a84:	19c6183a 	rol	r3,r3,r7
    4a88:	40800017 	ldw	r2,0(r8)
    4a8c:	10c4703a 	and	r2,r2,r3
    4a90:	40800015 	stw	r2,0(r8)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    4a94:	40800017 	ldw	r2,0(r8)
    4a98:	100170fa 	wrctl	ienable,r2
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    4a9c:	2001703a 	wrctl	status,r4
    4aa0:	5001703a 	wrctl	status,r10
    4aa4:	0007883a 	mov	r3,zero

    alt_irq_enable_all(status);
  }
  return rc; 
}
    4aa8:	1805883a 	mov	r2,r3
    4aac:	f800283a 	ret

00004ab0 <alt_load_section>:

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    4ab0:	2900051e 	bne	r5,r4,4ac8 <alt_load_section+0x18>
    4ab4:	f800283a 	ret
  {
    while( to != end )
    {
      *to++ = *from++;
    4ab8:	20800017 	ldw	r2,0(r4)
    4abc:	21000104 	addi	r4,r4,4
    4ac0:	28800015 	stw	r2,0(r5)
    4ac4:	29400104 	addi	r5,r5,4
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
    4ac8:	29bffb1e 	bne	r5,r6,4ab8 <alt_load_section+0x8>
    4acc:	f800283a 	ret

00004ad0 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    4ad0:	deffff04 	addi	sp,sp,-4
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
    4ad4:	01000034 	movhi	r4,0
    4ad8:	21145e04 	addi	r4,r4,20856
    4adc:	01400034 	movhi	r5,0
    4ae0:	29543504 	addi	r5,r5,20692
    4ae4:	01800034 	movhi	r6,0
    4ae8:	31945e04 	addi	r6,r6,20856
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    4aec:	dfc00015 	stw	ra,0(sp)
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
    4af0:	0004ab00 	call	4ab0 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
    4af4:	01000034 	movhi	r4,0
    4af8:	21100804 	addi	r4,r4,16416
    4afc:	01400034 	movhi	r5,0
    4b00:	29500804 	addi	r5,r5,16416
    4b04:	01800034 	movhi	r6,0
    4b08:	31905004 	addi	r6,r6,16704
    4b0c:	0004ab00 	call	4ab0 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
    4b10:	01000034 	movhi	r4,0
    4b14:	21142604 	addi	r4,r4,20632
    4b18:	01400034 	movhi	r5,0
    4b1c:	29542604 	addi	r5,r5,20632
    4b20:	01800034 	movhi	r6,0
    4b24:	31943504 	addi	r6,r6,20692
    4b28:	0004ab00 	call	4ab0 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    4b2c:	0004f0c0 	call	4f0c <alt_dcache_flush_all>
  alt_icache_flush_all();
}
    4b30:	dfc00017 	ldw	ra,0(sp)
    4b34:	dec00104 	addi	sp,sp,4
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  alt_icache_flush_all();
    4b38:	0004ff81 	jmpi	4ff8 <alt_icache_flush_all>

00004b3c <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    4b3c:	deffff04 	addi	sp,sp,-4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    4b40:	0009883a 	mov	r4,zero
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    4b44:	dfc00015 	stw	ra,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    4b48:	0004bdc0 	call	4bdc <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    4b4c:	0004ba40 	call	4ba4 <alt_sys_init>
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
    4b50:	d1203217 	ldw	r4,-32568(gp)
    4b54:	d1603317 	ldw	r5,-32564(gp)
    4b58:	d1a03417 	ldw	r6,-32560(gp)
  close(STDOUT_FILENO);
  exit (result);
#endif

  ALT_LOG_PRINT_BOOT("[alt_main.c] After main - we should not be here?.\r\n");
}
    4b5c:	dfc00017 	ldw	ra,0(sp)
    4b60:	dec00104 	addi	sp,sp,4
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
    4b64:	000456c1 	jmpi	456c <main>

00004b68 <alt_putstr>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided fputs() routine.
 */
int 
alt_putstr(const char* str)
{
    4b68:	defffe04 	addi	sp,sp,-8
    4b6c:	dc000015 	stw	r16,0(sp)
    4b70:	dfc00115 	stw	ra,4(sp)
    4b74:	2021883a 	mov	r16,r4
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
    4b78:	00050400 	call	5040 <strlen>
    4b7c:	800b883a 	mov	r5,r16
    4b80:	100d883a 	mov	r6,r2
    4b84:	01000034 	movhi	r4,0
    4b88:	21145704 	addi	r4,r4,20828
    4b8c:	000f883a 	mov	r7,zero
#else
    return fputs(str, stdout);
#endif
}
    4b90:	dfc00117 	ldw	ra,4(sp)
    4b94:	dc000017 	ldw	r16,0(sp)
    4b98:	dec00204 	addi	sp,sp,8
int 
alt_putstr(const char* str)
{
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
    4b9c:	0004bfc1 	jmpi	4bfc <altera_avalon_jtag_uart_write>

00004ba0 <usleep>:
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
  return alt_busy_sleep(us);
    4ba0:	0004e801 	jmpi	4e80 <alt_busy_sleep>

00004ba4 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    4ba4:	defffe04 	addi	sp,sp,-8
    4ba8:	dc000015 	stw	r16,0(sp)
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
    ALTERA_UP_AVALON_CHARACTER_LCD_INIT ( CHARACTER_LCD_0, character_lcd_0);
    4bac:	04000034 	movhi	r16,0
    4bb0:	84143504 	addi	r16,r16,20692
    4bb4:	8009883a 	mov	r4,r16
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    4bb8:	dfc00115 	stw	ra,4(sp)
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
    ALTERA_UP_AVALON_CHARACTER_LCD_INIT ( CHARACTER_LCD_0, character_lcd_0);
    4bbc:	0004ca80 	call	4ca8 <alt_up_character_lcd_init>

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
    4bc0:	01400034 	movhi	r5,0
    4bc4:	29545a04 	addi	r5,r5,20840
    4bc8:	8009883a 	mov	r4,r16
}
    4bcc:	dfc00117 	ldw	ra,4(sp)
    4bd0:	dc000017 	ldw	r16,0(sp)
    4bd4:	dec00204 	addi	sp,sp,8
    4bd8:	0004f181 	jmpi	4f18 <alt_dev_llist_insert>

00004bdc <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    4bdc:	deffff04 	addi	sp,sp,-4
    4be0:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( CPU_0, cpu_0);
    4be4:	0004ffc0 	call	4ffc <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    4be8:	00800044 	movi	r2,1
    4bec:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    4bf0:	dfc00017 	ldw	ra,0(sp)
    4bf4:	dec00104 	addi	sp,sp,4
    4bf8:	f800283a 	ret

00004bfc <altera_avalon_jtag_uart_write>:
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  unsigned int base = sp->base;
    4bfc:	21000017 	ldw	r4,0(r4)

  const char * end = ptr + count;
    4c00:	298f883a 	add	r7,r5,r6
    4c04:	20c00104 	addi	r3,r4,4
    4c08:	00000606 	br	4c24 <altera_avalon_jtag_uart_write+0x28>

  while (ptr < end)
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
    4c0c:	18800037 	ldwio	r2,0(r3)
    4c10:	10bfffec 	andhi	r2,r2,65535
    4c14:	10000326 	beq	r2,zero,4c24 <altera_avalon_jtag_uart_write+0x28>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
    4c18:	28800007 	ldb	r2,0(r5)
    4c1c:	29400044 	addi	r5,r5,1
    4c20:	20800035 	stwio	r2,0(r4)
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
    4c24:	29fff936 	bltu	r5,r7,4c0c <altera_avalon_jtag_uart_write+0x10>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);

  return count;
}
    4c28:	3005883a 	mov	r2,r6
    4c2c:	f800283a 	ret

00004c30 <get_DDRAM_addr>:
{
	//assume valid inputs
	unsigned char addr = 0x00000000;
	if (y_pos == 0)
	{
		addr |= x_pos;
    4c30:	2005883a 	mov	r2,r4
 **/
unsigned char get_DDRAM_addr(unsigned x_pos, unsigned y_pos)
{
	//assume valid inputs
	unsigned char addr = 0x00000000;
	if (y_pos == 0)
    4c34:	28000126 	beq	r5,zero,4c3c <get_DDRAM_addr+0xc>
		addr |= x_pos;
	}
	else
	{
		addr |= x_pos;
		addr |= 0x00000040;
    4c38:	20801014 	ori	r2,r4,64
    4c3c:	10803fcc 	andi	r2,r2,255
	}
	// b_7 is always 1 for DDRAM address, see datasheet
	return (addr | 0x00000080);
}
    4c40:	10802014 	ori	r2,r2,128
    4c44:	f800283a 	ret

00004c48 <alt_up_character_lcd_string>:
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr+i));
	}
}

void alt_up_character_lcd_string(alt_up_character_lcd_dev *dev, const char *ptr)
{
    4c48:	00000306 	br	4c58 <alt_up_character_lcd_string+0x10>
	while ( *ptr )
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr));
    4c4c:	20800a17 	ldw	r2,40(r4)
    4c50:	10c00065 	stbio	r3,1(r2)
		++ptr;
    4c54:	29400044 	addi	r5,r5,1
	}
}

void alt_up_character_lcd_string(alt_up_character_lcd_dev *dev, const char *ptr)
{
	while ( *ptr )
    4c58:	28c00007 	ldb	r3,0(r5)
    4c5c:	183ffb1e 	bne	r3,zero,4c4c <alt_up_character_lcd_string+0x4>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr));
		++ptr;
	}
}
    4c60:	f800283a 	ret

00004c64 <alt_up_character_lcd_write>:

  return dev;
}

void alt_up_character_lcd_write(alt_up_character_lcd_dev *dev, const char *ptr, unsigned int len)
{
    4c64:	000f883a 	mov	r7,zero
    4c68:	00000406 	br	4c7c <alt_up_character_lcd_write+0x18>
	unsigned int i;
	for (i = 0; i < len; i++)
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr+i));
    4c6c:	10c00007 	ldb	r3,0(r2)
    4c70:	20800a17 	ldw	r2,40(r4)
    4c74:	10c00065 	stbio	r3,1(r2)
}

void alt_up_character_lcd_write(alt_up_character_lcd_dev *dev, const char *ptr, unsigned int len)
{
	unsigned int i;
	for (i = 0; i < len; i++)
    4c78:	39c00044 	addi	r7,r7,1
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr+i));
    4c7c:	29c5883a 	add	r2,r5,r7
}

void alt_up_character_lcd_write(alt_up_character_lcd_dev *dev, const char *ptr, unsigned int len)
{
	unsigned int i;
	for (i = 0; i < len; i++)
    4c80:	39bffa1e 	bne	r7,r6,4c6c <alt_up_character_lcd_write+0x8>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr+i));
	}
}
    4c84:	f800283a 	ret

00004c88 <alt_up_character_lcd_write_fd>:
}

// this function isn't used, and is included for future upgrades
int alt_up_character_lcd_write_fd(alt_fd *fd, const char *ptr, int len)
{
	alt_up_character_lcd_write( (alt_up_character_lcd_dev *) fd->dev, ptr, (unsigned int) len);
    4c88:	21000017 	ldw	r4,0(r4)
	}
}

// this function isn't used, and is included for future upgrades
int alt_up_character_lcd_write_fd(alt_fd *fd, const char *ptr, int len)
{
    4c8c:	deffff04 	addi	sp,sp,-4
    4c90:	dfc00015 	stw	ra,0(sp)
	alt_up_character_lcd_write( (alt_up_character_lcd_dev *) fd->dev, ptr, (unsigned int) len);
    4c94:	0004c640 	call	4c64 <alt_up_character_lcd_write>
	return 0;
}
    4c98:	0005883a 	mov	r2,zero
    4c9c:	dfc00017 	ldw	ra,0(sp)
    4ca0:	dec00104 	addi	sp,sp,4
    4ca4:	f800283a 	ret

00004ca8 <alt_up_character_lcd_init>:
 */
////////////////////////////////////////////////////////////////////////////

void alt_up_character_lcd_init(alt_up_character_lcd_dev *lcd)
{
	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(lcd->base, ALT_UP_CHARACTER_LCD_COMM_CLEAR_DISPLAY);
    4ca8:	20c00a17 	ldw	r3,40(r4)
    4cac:	00800044 	movi	r2,1
    4cb0:	18800025 	stbio	r2,0(r3)
	// register the device 
	// see "Developing Device Drivers for the HAL" in "Nios II Software Developer's Handbook"
}
    4cb4:	f800283a 	ret

00004cb8 <alt_up_character_lcd_send_cmd>:
 * @return nothing
 **/
void alt_up_character_lcd_send_cmd(alt_up_character_lcd_dev *lcd, unsigned char cmd)
{
 	// NOTE: We use the term Instruction Register and Control Register interchangeably
	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(lcd->base, cmd);
    4cb8:	20800a17 	ldw	r2,40(r4)
    4cbc:	29403fcc 	andi	r5,r5,255
    4cc0:	11400025 	stbio	r5,0(r2)
}
    4cc4:	f800283a 	ret

00004cc8 <alt_up_character_lcd_cursor_blink_on>:
	alt_up_character_lcd_send_cmd(lcd, ALT_UP_CHARACTER_LCD_COMM_CURSOR_OFF);
}

void alt_up_character_lcd_cursor_blink_on(alt_up_character_lcd_dev *lcd)
{
	alt_up_character_lcd_send_cmd(lcd, ALT_UP_CHARACTER_LCD_COMM_CURSOR_BLINK_ON);
    4cc8:	014003c4 	movi	r5,15
    4ccc:	0004cb81 	jmpi	4cb8 <alt_up_character_lcd_send_cmd>

00004cd0 <alt_up_character_lcd_cursor_off>:
	return 0;
}

void alt_up_character_lcd_cursor_off(alt_up_character_lcd_dev *lcd)
{
	alt_up_character_lcd_send_cmd(lcd, ALT_UP_CHARACTER_LCD_COMM_CURSOR_OFF);
    4cd0:	01400304 	movi	r5,12
    4cd4:	0004cb81 	jmpi	4cb8 <alt_up_character_lcd_send_cmd>

00004cd8 <alt_up_character_lcd_erase_pos>:
	while (num_offset-- > 0)
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
}

int alt_up_character_lcd_erase_pos(alt_up_character_lcd_dev *lcd, unsigned x_pos, unsigned y_pos)
{
    4cd8:	defffe04 	addi	sp,sp,-8
	// boundary check
	if (x_pos > 39 || y_pos > 1 )
    4cdc:	008009c4 	movi	r2,39
	while (num_offset-- > 0)
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
}

int alt_up_character_lcd_erase_pos(alt_up_character_lcd_dev *lcd, unsigned x_pos, unsigned y_pos)
{
    4ce0:	dc000015 	stw	r16,0(sp)
    4ce4:	dfc00115 	stw	ra,4(sp)
    4ce8:	2807883a 	mov	r3,r5
    4cec:	2021883a 	mov	r16,r4
	// boundary check
	if (x_pos > 39 || y_pos > 1 )
    4cf0:	11400d36 	bltu	r2,r5,4d28 <alt_up_character_lcd_erase_pos+0x50>
    4cf4:	00800044 	movi	r2,1
		return -1;

	// get address
	unsigned char addr = get_DDRAM_addr(x_pos, y_pos);
    4cf8:	300b883a 	mov	r5,r6
    4cfc:	1809883a 	mov	r4,r3
}

int alt_up_character_lcd_erase_pos(alt_up_character_lcd_dev *lcd, unsigned x_pos, unsigned y_pos)
{
	// boundary check
	if (x_pos > 39 || y_pos > 1 )
    4d00:	11800936 	bltu	r2,r6,4d28 <alt_up_character_lcd_erase_pos+0x50>
		return -1;

	// get address
	unsigned char addr = get_DDRAM_addr(x_pos, y_pos);
    4d04:	0004c300 	call	4c30 <get_DDRAM_addr>
    4d08:	11403fcc 	andi	r5,r2,255
    4d0c:	8009883a 	mov	r4,r16
    4d10:	0004cb80 	call	4cb8 <alt_up_character_lcd_send_cmd>
	// set cursor to dest point
	alt_up_character_lcd_send_cmd(lcd, addr);
	//send an empty char as erase (refer to the Character Generator ROM part of the Datasheet)
	IOWR_ALT_UP_CHARACTER_LCD_DATA(lcd->base, (0x00000002) );
    4d14:	80c00a17 	ldw	r3,40(r16)
    4d18:	00800084 	movi	r2,2
    4d1c:	18800065 	stbio	r2,1(r3)
    4d20:	0005883a 	mov	r2,zero
    4d24:	00000106 	br	4d2c <alt_up_character_lcd_erase_pos+0x54>
	return 0;
    4d28:	00bfffc4 	movi	r2,-1
}
    4d2c:	dfc00117 	ldw	ra,4(sp)
    4d30:	dc000017 	ldw	r16,0(sp)
    4d34:	dec00204 	addi	sp,sp,8
    4d38:	f800283a 	ret

00004d3c <alt_up_character_lcd_shift_display>:
	while (num_offset-- > 0)
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
}

void alt_up_character_lcd_shift_display(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
    4d3c:	defffc04 	addi	sp,sp,-16
    4d40:	dc400115 	stw	r17,4(sp)
    4d44:	dfc00315 	stw	ra,12(sp)
    4d48:	dc800215 	stw	r18,8(sp)
    4d4c:	dc000015 	stw	r16,0(sp)
    4d50:	2023883a 	mov	r17,r4
	if (x_right_shift_offset == 0) 
    4d54:	28000f26 	beq	r5,zero,4d94 <alt_up_character_lcd_shift_display+0x58>
		// don't ask me to do nothing 
		return;

	// see shift right or left
	unsigned char shift_cmd = (x_right_shift_offset > 0) ? 
		ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_LEFT;
    4d58:	01400216 	blt	zero,r5,4d64 <alt_up_character_lcd_shift_display+0x28>
    4d5c:	04800604 	movi	r18,24
    4d60:	00000106 	br	4d68 <alt_up_character_lcd_shift_display+0x2c>
    4d64:	04800704 	movi	r18,28
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
    4d68:	2800010e 	bge	r5,zero,4d70 <alt_up_character_lcd_shift_display+0x34>
    4d6c:	014bc83a 	sub	r5,zero,r5
    4d70:	2821883a 	mov	r16,r5
    4d74:	00000106 	br	4d7c <alt_up_character_lcd_shift_display+0x40>
	// do the shift
	while (num_offset-- > 0)
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
    4d78:	0004cb80 	call	4cb8 <alt_up_character_lcd_send_cmd>
		ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
    4d7c:	843fffc4 	addi	r16,r16,-1
    4d80:	80c03fcc 	andi	r3,r16,255
    4d84:	00803fc4 	movi	r2,255
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
    4d88:	8809883a 	mov	r4,r17
    4d8c:	91403fcc 	andi	r5,r18,255
		ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
    4d90:	18bff91e 	bne	r3,r2,4d78 <alt_up_character_lcd_shift_display+0x3c>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
}
    4d94:	dfc00317 	ldw	ra,12(sp)
    4d98:	dc800217 	ldw	r18,8(sp)
    4d9c:	dc400117 	ldw	r17,4(sp)
    4da0:	dc000017 	ldw	r16,0(sp)
    4da4:	dec00404 	addi	sp,sp,16
    4da8:	f800283a 	ret

00004dac <alt_up_character_lcd_shift_cursor>:
	alt_up_character_lcd_send_cmd(lcd, addr);
	return 0;
}

void alt_up_character_lcd_shift_cursor(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
    4dac:	defffc04 	addi	sp,sp,-16
    4db0:	dc400115 	stw	r17,4(sp)
    4db4:	dfc00315 	stw	ra,12(sp)
    4db8:	dc800215 	stw	r18,8(sp)
    4dbc:	dc000015 	stw	r16,0(sp)
    4dc0:	2023883a 	mov	r17,r4
	if (x_right_shift_offset == 0) 
    4dc4:	28000f26 	beq	r5,zero,4e04 <alt_up_character_lcd_shift_cursor+0x58>
		// don't ask me to do nothing 
		return;

	// see shift right or left
	unsigned char shift_cmd = (x_right_shift_offset > 0) ? 
		ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_LEFT;
    4dc8:	01400216 	blt	zero,r5,4dd4 <alt_up_character_lcd_shift_cursor+0x28>
    4dcc:	04800404 	movi	r18,16
    4dd0:	00000106 	br	4dd8 <alt_up_character_lcd_shift_cursor+0x2c>
    4dd4:	04800504 	movi	r18,20
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
    4dd8:	2800010e 	bge	r5,zero,4de0 <alt_up_character_lcd_shift_cursor+0x34>
    4ddc:	014bc83a 	sub	r5,zero,r5
    4de0:	2821883a 	mov	r16,r5
    4de4:	00000106 	br	4dec <alt_up_character_lcd_shift_cursor+0x40>
	// do the shift
	while (num_offset-- > 0)
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
    4de8:	0004cb80 	call	4cb8 <alt_up_character_lcd_send_cmd>
		ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
    4dec:	843fffc4 	addi	r16,r16,-1
    4df0:	80c03fcc 	andi	r3,r16,255
    4df4:	00803fc4 	movi	r2,255
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
    4df8:	8809883a 	mov	r4,r17
    4dfc:	91403fcc 	andi	r5,r18,255
		ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
    4e00:	18bff91e 	bne	r3,r2,4de8 <alt_up_character_lcd_shift_cursor+0x3c>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
}
    4e04:	dfc00317 	ldw	ra,12(sp)
    4e08:	dc800217 	ldw	r18,8(sp)
    4e0c:	dc400117 	ldw	r17,4(sp)
    4e10:	dc000017 	ldw	r16,0(sp)
    4e14:	dec00404 	addi	sp,sp,16
    4e18:	f800283a 	ret

00004e1c <alt_up_character_lcd_set_cursor_pos>:
	return 0;
}

int alt_up_character_lcd_set_cursor_pos(alt_up_character_lcd_dev *lcd, unsigned x_pos, 
	 unsigned y_pos)
{
    4e1c:	defffe04 	addi	sp,sp,-8
	//boundary check
	if (x_pos > 39 || y_pos > 1 )
    4e20:	008009c4 	movi	r2,39
	return 0;
}

int alt_up_character_lcd_set_cursor_pos(alt_up_character_lcd_dev *lcd, unsigned x_pos, 
	 unsigned y_pos)
{
    4e24:	dc000015 	stw	r16,0(sp)
    4e28:	dfc00115 	stw	ra,4(sp)
    4e2c:	2807883a 	mov	r3,r5
    4e30:	2021883a 	mov	r16,r4
	//boundary check
	if (x_pos > 39 || y_pos > 1 )
    4e34:	11400a36 	bltu	r2,r5,4e60 <alt_up_character_lcd_set_cursor_pos+0x44>
    4e38:	00800044 	movi	r2,1
		// invalid argument
		return -1;
	// calculate address
	unsigned char addr = get_DDRAM_addr(x_pos, y_pos);
    4e3c:	300b883a 	mov	r5,r6
    4e40:	1809883a 	mov	r4,r3

int alt_up_character_lcd_set_cursor_pos(alt_up_character_lcd_dev *lcd, unsigned x_pos, 
	 unsigned y_pos)
{
	//boundary check
	if (x_pos > 39 || y_pos > 1 )
    4e44:	11800636 	bltu	r2,r6,4e60 <alt_up_character_lcd_set_cursor_pos+0x44>
		// invalid argument
		return -1;
	// calculate address
	unsigned char addr = get_DDRAM_addr(x_pos, y_pos);
    4e48:	0004c300 	call	4c30 <get_DDRAM_addr>
    4e4c:	11403fcc 	andi	r5,r2,255
    4e50:	8009883a 	mov	r4,r16
    4e54:	0004cb80 	call	4cb8 <alt_up_character_lcd_send_cmd>
    4e58:	0005883a 	mov	r2,zero
    4e5c:	00000106 	br	4e64 <alt_up_character_lcd_set_cursor_pos+0x48>
	// set the cursor
	alt_up_character_lcd_send_cmd(lcd, addr);
	return 0;
    4e60:	00bfffc4 	movi	r2,-1
}
    4e64:	dfc00117 	ldw	ra,4(sp)
    4e68:	dc000017 	ldw	r16,0(sp)
    4e6c:	dec00204 	addi	sp,sp,8
    4e70:	f800283a 	ret

00004e74 <alt_up_character_lcd_open_dev>:
{
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_character_lcd_dev *dev = (alt_up_character_lcd_dev*)alt_find_dev(name, &alt_dev_list);
    4e74:	01400034 	movhi	r5,0
    4e78:	29545a04 	addi	r5,r5,20840
    4e7c:	0004f881 	jmpi	4f88 <alt_find_dev>

00004e80 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
    4e80:	defffe04 	addi	sp,sp,-8
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
    4e84:	014666b4 	movhi	r5,6554
    4e88:	29666644 	addi	r5,r5,-26215
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
    4e8c:	dc000015 	stw	r16,0(sp)
    4e90:	dfc00115 	stw	ra,4(sp)
    4e94:	2021883a 	mov	r16,r4
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
    4e98:	0004a000 	call	4a00 <__udivsi3>
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
    4e9c:	10001126 	beq	r2,zero,4ee4 <alt_busy_sleep+0x64>
    4ea0:	0007883a 	mov	r3,zero
    4ea4:	01200034 	movhi	r4,32768
    4ea8:	213fffc4 	addi	r4,r4,-1
    4eac:	017999b4 	movhi	r5,58982
    4eb0:	295999c4 	addi	r5,r5,26215
    4eb4:	00000406 	br	4ec8 <alt_busy_sleep+0x48>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
    4eb8:	213fffc4 	addi	r4,r4,-1
    4ebc:	203ffe1e 	bne	r4,zero,4eb8 <alt_busy_sleep+0x38>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
    4ec0:	8161883a 	add	r16,r16,r5
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
    4ec4:	18c00044 	addi	r3,r3,1
    4ec8:	18bffb16 	blt	r3,r2,4eb8 <alt_busy_sleep+0x38>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
    4ecc:	8009883a 	mov	r4,r16
    4ed0:	01400144 	movi	r5,5
    4ed4:	00050600 	call	5060 <__mulsi3>
    4ed8:	10bfffc4 	addi	r2,r2,-1
    4edc:	103ffe1e 	bne	r2,zero,4ed8 <alt_busy_sleep+0x58>
    4ee0:	00000506 	br	4ef8 <alt_busy_sleep+0x78>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
    4ee4:	8009883a 	mov	r4,r16
    4ee8:	01400144 	movi	r5,5
    4eec:	00050600 	call	5060 <__mulsi3>
    4ef0:	10bfffc4 	addi	r2,r2,-1
    4ef4:	00bffe16 	blt	zero,r2,4ef0 <alt_busy_sleep+0x70>
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
}
    4ef8:	0005883a 	mov	r2,zero
    4efc:	dfc00117 	ldw	ra,4(sp)
    4f00:	dc000017 	ldw	r16,0(sp)
    4f04:	dec00204 	addi	sp,sp,8
    4f08:	f800283a 	ret

00004f0c <alt_dcache_flush_all>:
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
    4f0c:	f800283a 	ret

00004f10 <alt_dev_null_write>:
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
  return len;
}
    4f10:	3005883a 	mov	r2,r6
    4f14:	f800283a 	ret

00004f18 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
    4f18:	deffff04 	addi	sp,sp,-4
    4f1c:	dfc00015 	stw	ra,0(sp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
    4f20:	20000326 	beq	r4,zero,4f30 <alt_dev_llist_insert+0x18>
    4f24:	20800217 	ldw	r2,8(r4)
{
  entry->previous = list;
  entry->next     = list->next;

  list->next->previous = entry;
  list->next           = entry;
    4f28:	000d883a 	mov	r6,zero
    4f2c:	10000c1e 	bne	r2,zero,4f60 <alt_dev_llist_insert+0x48>

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  return ((alt_errno) ? alt_errno() : &errno);
    4f30:	00800034 	movhi	r2,0
    4f34:	10945d04 	addi	r2,r2,20852
    4f38:	10800017 	ldw	r2,0(r2)
    4f3c:	00c00034 	movhi	r3,0
    4f40:	18d48b04 	addi	r3,r3,21036
    4f44:	10000226 	beq	r2,zero,4f50 <alt_dev_llist_insert+0x38>
    4f48:	103ee83a 	callr	r2
    4f4c:	1007883a 	mov	r3,r2
  {
    ALT_ERRNO = EINVAL;
    4f50:	00800584 	movi	r2,22
    4f54:	01bffa84 	movi	r6,-22
    4f58:	18800015 	stw	r2,0(r3)
    4f5c:	00000606 	br	4f78 <alt_dev_llist_insert+0x60>

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  entry->next     = list->next;
    4f60:	28800017 	ldw	r2,0(r5)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    4f64:	21400115 	stw	r5,4(r4)
  entry->next     = list->next;
    4f68:	20800015 	stw	r2,0(r4)

  list->next->previous = entry;
    4f6c:	28800017 	ldw	r2,0(r5)
  list->next           = entry;
    4f70:	29000015 	stw	r4,0(r5)
                alt_llist* entry)
{
  entry->previous = list;
  entry->next     = list->next;

  list->next->previous = entry;
    4f74:	11000115 	stw	r4,4(r2)
   */
  
  alt_llist_insert(list, &dev->llist);

  return 0;  
}
    4f78:	3005883a 	mov	r2,r6
    4f7c:	dfc00017 	ldw	ra,0(sp)
    4f80:	dec00104 	addi	sp,sp,4
    4f84:	f800283a 	ret

00004f88 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
    4f88:	defffb04 	addi	sp,sp,-20
    4f8c:	dcc00315 	stw	r19,12(sp)
    4f90:	dc800215 	stw	r18,8(sp)
    4f94:	dc400115 	stw	r17,4(sp)
    4f98:	dc000015 	stw	r16,0(sp)
    4f9c:	dfc00415 	stw	ra,16(sp)
  alt_dev* next = (alt_dev*) llist->next;
    4fa0:	2c000017 	ldw	r16,0(r5)
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
    4fa4:	2823883a 	mov	r17,r5
    4fa8:	2027883a 	mov	r19,r4
  alt_dev* next = (alt_dev*) llist->next;
  alt_32 len;

  len  = strlen(name) + 1;
    4fac:	00050400 	call	5040 <strlen>
    4fb0:	14800044 	addi	r18,r2,1
    4fb4:	00000406 	br	4fc8 <alt_find_dev+0x40>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
    4fb8:	81000217 	ldw	r4,8(r16)
    4fbc:	00050040 	call	5004 <memcmp>
    4fc0:	10000526 	beq	r2,zero,4fd8 <alt_find_dev+0x50>
    {
      /* match found */

      return next;
    }
    next = (alt_dev*) next->llist.next;
    4fc4:	84000017 	ldw	r16,0(r16)
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
    4fc8:	980b883a 	mov	r5,r19
    4fcc:	900d883a 	mov	r6,r18
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    4fd0:	847ff91e 	bne	r16,r17,4fb8 <alt_find_dev+0x30>
    4fd4:	0021883a 	mov	r16,zero
  }
  
  /* No match found */
  
  return NULL;
}
    4fd8:	8005883a 	mov	r2,r16
    4fdc:	dfc00417 	ldw	ra,16(sp)
    4fe0:	dcc00317 	ldw	r19,12(sp)
    4fe4:	dc800217 	ldw	r18,8(sp)
    4fe8:	dc400117 	ldw	r17,4(sp)
    4fec:	dc000017 	ldw	r16,0(sp)
    4ff0:	dec00504 	addi	sp,sp,20
    4ff4:	f800283a 	ret

00004ff8 <alt_icache_flush_all>:
void alt_icache_flush_all (void)
{
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
    4ff8:	f800283a 	ret

00004ffc <altera_nios2_qsys_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
    4ffc:	000170fa 	wrctl	ienable,zero
}
    5000:	f800283a 	ret

00005004 <memcmp>:
    5004:	31ffffc4 	addi	r7,r6,-1
    5008:	3000061e 	bne	r6,zero,5024 <memcmp+0x20>
    500c:	00000a06 	br	5038 <memcmp+0x34>
    5010:	39ffffc4 	addi	r7,r7,-1
    5014:	00bfffc4 	movi	r2,-1
    5018:	21000044 	addi	r4,r4,1
    501c:	29400044 	addi	r5,r5,1
    5020:	38800526 	beq	r7,r2,5038 <memcmp+0x34>
    5024:	20c00003 	ldbu	r3,0(r4)
    5028:	28800003 	ldbu	r2,0(r5)
    502c:	18bff826 	beq	r3,r2,5010 <memcmp+0xc>
    5030:	1885c83a 	sub	r2,r3,r2
    5034:	f800283a 	ret
    5038:	0005883a 	mov	r2,zero
    503c:	f800283a 	ret

00005040 <strlen>:
    5040:	20800007 	ldb	r2,0(r4)
    5044:	10000526 	beq	r2,zero,505c <strlen+0x1c>
    5048:	2007883a 	mov	r3,r4
    504c:	18c00044 	addi	r3,r3,1
    5050:	18800007 	ldb	r2,0(r3)
    5054:	103ffd1e 	bne	r2,zero,504c <strlen+0xc>
    5058:	1905c83a 	sub	r2,r3,r4
    505c:	f800283a 	ret

00005060 <__mulsi3>:
    5060:	20000a26 	beq	r4,zero,508c <__mulsi3+0x2c>
    5064:	0007883a 	mov	r3,zero
    5068:	2080004c 	andi	r2,r4,1
    506c:	1005003a 	cmpeq	r2,r2,zero
    5070:	2008d07a 	srli	r4,r4,1
    5074:	1000011e 	bne	r2,zero,507c <__mulsi3+0x1c>
    5078:	1947883a 	add	r3,r3,r5
    507c:	294b883a 	add	r5,r5,r5
    5080:	203ff91e 	bne	r4,zero,5068 <__mulsi3+0x8>
    5084:	1805883a 	mov	r2,r3
    5088:	f800283a 	ret
    508c:	0007883a 	mov	r3,zero
    5090:	1805883a 	mov	r2,r3
    5094:	f800283a 	ret
